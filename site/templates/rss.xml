<rss version="2.0">
<channel>
    <title>ntoll.org ~ everything I say is false</title>
    <link>http://ntoll.org/</link>
    <description>The personal website of Nicholas H.Tollervey</description>
    <image>
        <url>http://ntoll.org/static/images/logo.png</url>
        <link>http://ntoll.org/</link>
    </image>
    
    <item>
        <title>Politics, Programming, Data and the Drogulus</title>
        <link>http://ntoll.org/article/ppdd</link>
        <description><h1><a href="/article/ppdd">Politics, Programming, Data and the Drogulus</a></h1><p class="published_on">Saturday 18th May 2013 (2:00PM)</p>
<p><small>(This article is based upon a short talk I gave at
<a href="http://www.opentech.org.uk/2013/">Opentech</a> 2013.)</small></p>

<p><img src="/static/images/drogulus.png" alt="Drogulus logo"/></p>


<p><small>Image credits: &copy; the author.</small></p>
</description>
        <pubDate>Sat, 18 May 2013 14:00:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Taking the Long Term View</title>
        <link>http://ntoll.org/article/long-term-view</link>
        <description><h1><a href="/article/long-term-view">Taking the Long Term View</a></h1><p class="published_on">Thursday 28th March 2013 (8:00AM)</p>

<p>The <a href="http://www.britishmuseum.org/">British Museum</a> is one of my
favourite places because it forces me to take on a perspective of 5000 years
or more. Take the
<a href="http://www.britishmuseum.org/explore/highlights/highlight_objects/me/t/tablet,_allocation_of_beer.aspx">Mesopotamian clay tablet</a>
shown below: it records the allocation of beer by administrators in the city
of <a href="https://en.wikipedia.org/wiki/Uruk">Uruk</a>. The symbol
representing beer is apparently an upright jar with a pointed base, amounts
are notated by circles and semi-circles and, at the bottom left, there is a
figure drinking from a bowl.</p>

<img src="/static/images/15_writingtablet_l.jpg" alt="Mesopotamian tablet"/>

<p>It's about 5100 years old. Now, pause for a moment to consider its age.</p>

<p>The difference in time between today and the era of
<a href="https://en.wikipedia.org/wiki/Julius_Caesar">Julius Caesar</a> and
<a href="https://en.wikipedia.org/wiki/Cleopatra_VII_of_Egypt">Cleopatra</a>
is 1000 years less than the period between the creation of the Mesopotamian
tablet and the era of Caesar and Cleopatra. Put simply, Caesar and Cleopatra
are closer in time to us (by 1000 years) than they are to the Mesopotamian
scribe who recorded the allocation of beer to citizens of Uruk.</p>

<p>It is intriguing that the tablet is political in nature, an instance
of a new technology and of economic interest. Not only is it evidence of the
machinations of the state in Uruk but it demonstrates how a new technology
(writing) changed the capabilities of such a state: for the first time it was
possible to keep records and thus run a bureaucracy on a large scale.
Furthermore, it records receipt of payment requiring concepts such as balance,
debt and a measure of value (in beer).</p>

<p>Such concepts (writing, state bureaucracy and fundamental economics) are
unremarkable in today's world, making it difficult for us to appreciate how
important, strange or unusual they must have seemed when they first appeared. I
wonder what important, strange or unusual aspects of our time will be
unremarkable to our descendants. Furthermore, what aspects of our lives that
seem fixed today will be completely different 5000 years hence?</p>

<p>Guessing the future is a fool's game. As
<a href="http://en.wikipedia.org/wiki/Alan_Kay">Alan Kay</a> famously
stated,</p>

<blockquote>"The best way to predict the future is to invent it."</blockquote>

<p>Something from today that "<em>invents the future</em>" is
programming, and I'm guessing the
<a href="http://www.informatimago.com/develop/lisp/com/informatimago/small-cl-pgms/wang.html">Lisp program from 1960</a>
copied below is our Mesopotamian tablet for future generations:</p>

<p><pre><code class="lisp">(shadow '(trace untrace))
(defun trace   (functions) (eval `(cl:trace   ,@functions)))
(defun untrace (functions) (eval `(cl:untrace ,@functions)))

(defun define (definitions)
  (dolist (def definitions)
    (eval (if (and (consp (second def)) (eq 'lambda (car (second def))))
              `(progn (defun        ,(first def) ,@(cdr (second def)))
                      (defparameter ,(first def) ,(second def)))
              `(defparameter ,(first def) ,(second def))))))

(defun stop (arguments) (throw 'driver-end-of-deck nil))
(defun fin  (arguments) (throw 'driver-end-of-deck nil))
(defun test (arguments) (princ arguments) (terpri))

(defun driver (path)
  (with-open-file (cards path)
    (catch 'driver-end-of-deck
      (loop (let ((first-char (read-char cards)))
              (if (char= #\* first-char)
                  (read-line cards)     ; comment
                  (progn
                    (unread-char first-char cards)
                    (let* ((command   (read cards))
                           (arguments (if (member command '(stop fin test))
                                          (list (read-line cards))
                                          (read cards))))
                      (print (apply command arguments))))))))))</code></pre></p>


<p>Despite this code being more than 50 years old, it is still understandable
to anyone who has read my
<a href="/article/lisp-concise-and-simple">recent Lisp article</a>. Furthermore
it forces me to wonder what the computational world will be like in 5000 years.
I hope the <a href="/article/the-web-concise-and-simple">world wide web</a>
will be long gone and replaced with something much more capable and better
engineered and I guess that new computer architectures will arise to replace
the
<a href="https://en.wikipedia.org/wiki/Von_Neumann_architecture">Von Neumann</a>
/ <a href="https://en.wikipedia.org/wiki/Harvard_architecture">Harvard</a>
based models in current use.</p>

<p>Perhaps the final word should be another Alan Kay quote:</p>

<blockquote>"I believe that the only kind of science computing can be is like
the science of bridge building. Somebody has to build the bridges and other
people have to tear them down and make better theories, and you have to keep
on building bridges."</blockquote>

<p><small>Image credits: Mesopotamian tablet
&copy; <a href="http://www.britishmuseum.org/">Trustees of the British Museum</a>
</small></p>
</description>
        <pubDate>Thu, 28 March 2013 08:00:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Programming Minecraft on the RaspberryPi</title>
        <link>http://ntoll.org/article/minecraft-pi</link>
        <description><h1><a href="/article/minecraft-pi">Programming Minecraft on the RaspberryPi</a></h1><p class="published_on">Thursday 16th March 2013 (10:45PM)</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/MmB9b5njVbA?rel=0" frameborder="0" allowfullscreen></iframe>

<p><a href="http://minecraft.net/">Minecraft</a> is a sort of digital Lego.
Players explore a blocky computer generated world and have the ability to build
new terrain, buildings and other features. Many users have generated creative
and complicated structures within their games by carefully placing individual
bricks (just like Lego). A quick
<a href="https://www.google.com/search?q=minecraft&hl=en&source=lnms&tbm=isch">Google image search for Minecraft</a> will return lots of amazing results.</p>

<p>The <a href="http://www.raspberrypi.org/">RaspberryPi</a> is a cheap
computer designed to encourage kids (of all ages) to learn how to program.
Apparently, the "pi" part of the name is a misspelled reference to the
<a href="http://python.org">Python</a> programming language - the RaspberryPi's
principal programming language for education.</p>

<p>Minecraft is amazingly popular among kids (my own included). I guess, like
Lego, it's the potential for creative generative play that is so appealing.
Wouldn't it be great if there were a version of Minecraft that you could
program in Python that ran on the RaspberryPi..?</p>

<p><a href="http://pi.minecraft.net/">THERE IS!</a></p>

<p>I'm currently at <a href="https://us.pycon.org/2013/">PyconUS 2013</a> in
California, every attendee has been given a RaspberryPi and there's a
RaspberryPi lab in which attendees are encouraged to try their new piece of
kit. I just spent a fun morning programming Minecraft with Python. What follows
is a quick "how to" guide to get you started.</p>

<p>I'll assume you've got a RaspberryPi to hand and that it's connected to the
internet. (If you're unsure how to do this I suggest you visit the main
<a href="http://raspberrypi.org/">RaspberryPi website</a> for more
information.)</p>

<p>First you should <a href="http://pi.minecraft.net/?page_id=10">download the
RaspberryPi version of Minecraft</a> and follow the instructions at the web
page to which I just linked.</p>

<p>Next, once you have Minecraft running on your RaspberryPi I suggest you play
for a while. Create a world and have a look around. Here's a run-down of the
commands you can use:</p>

<ul>
    <li>Keyboard
        <ul>
            <li>W,A,S,D - Move (or navigate inventory)</li>
            <li>SPACE - Jump, double tap to start/stop flying, hold to fly
            higher</li>
            <li>SHIFT - Sneak, hold to fly lower</li>
            <li>E - Open inventory</li>
            <li>1-8 - Select inventory slot item to use</li>
            <li>ESC - Show/hide menu</li>
            <li>TAB - Release mouse without showing menu</li>
            <li>ENTER - Confirm menu selection</li>
        </ul>
    </li>
    <li>Mouse
        <ul>
            <li>Steer - Look/turn around</li>
            <li>Left mouse button - Remove block (hold)</li>
            <li>Right mouse button - Place block, hit block with sword</li>
            <li>Mouse wheel - Select inventory slot item to use</li>
        </ul>
    </li>
</ul>

<p>Cool huh..?</p>

<p>But wouldn't it be fun to be able to program and automate the manipulation
of the game world with Python..?</p>

<p>Here's how to get started...</p>

<p>Open a terminal and change in to the Minecraft directory
(<code>mcpi</code>) within which you'll see a child directory called
<code>api</code> within which is yet another called <code>python</code>. From
within the <code>python</code> directory start Python by typing,
<code>python</code>.</p>

<p>Now, type in the following:</p>

<p><pre><code class="python">&gt;&gt;&gt; from mcpi import minecraft
&gt;&gt;&gt; mc = minecraft.Minecraft.create("127.0.0.1")
&gt;&gt;&gt; mc.postToChat("Hello, World!")
</code></pre></p>

<p>You should see the message <em>Hello, World!</em> pop up in the Minecraft
world. Congratulations, you've just programmed Minecraft!</p>

<p>The first command imported all the things that Python needs to talk to the
Minecraft game. The second line creates an object called <code>mc</code> that
represents a connection to your game. The third line sends the chat message
to the game.</p>

<p>How about building things within the Minecraft world..? Check this out...</p>

<p><pre><code class="python">&gt;&gt;&gt; from mcpi import block
&gt;&gt;&gt; mc.player.getTilePos()
Vec3(37,0,-39)
&gt;&gt;&gt; mc.setBlock(38, 0, -38, block.STONE_BRICK.id)
</code></pre></p>

<p>On the first line I import information Python needs about the blocks that
you can place within the Minecraft world. Next, I ask the game where in the
world my player is located. The game responds with an <em>x</em>, <em>y</em>
and <em>z</em> based location expressed as a vector. Finally, I use the
<code>setBlock</code> method to place a stone brick on an adjacent square.
If you take a look around you'll see it right next to you!</p>

<p>Actually, you will see different results to me because your player will be
stood in a different location. See if you can change the final line to place
a block close to your own player's location.</p>

<p>That's it (for now) and covers pretty much all I found out in the first 15
minutes of hacking about. If you want to explore the API further I suggest you
look at the <code>mcpi_protocol_spec.txt</code> file in the
<code>mcpi/api/spec</code> directory.</p>

<p>Personally, I think this is a gift horse that teachers everywhere should be
looking at in the mouth.</p>

<p>I'll blog some more about this when I get back to the UK.</p>

</description>
        <pubDate>Sat, 16 March 2013 22:45:00 GMT</pubDate>
    </item>
    
</channel>
</rss>