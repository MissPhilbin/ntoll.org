<?xml version"1.0" ?>
<rss version="2.0">
<channel>
    <title>ntoll.org ~ everything I say is false</title>
    <link>http://ntoll.org/</link>
    <description>The personal website of Nicholas H.Tollervey</description>
    <image>
        <url>http://ntoll.org/static/images/logo.png</url>
        <link>http://ntoll.org/</link>
    </image>
    
    <item>
        <title>Metaclasses</title>
        <link>http://ntoll.org/article/metaclasses</link>
        <description><h1><a href="/article/metaclasses">Metaclasses</a></h1><p class="published_on">Monday 27 August 2012 (01:00AM)</p>

<p><a href="http://python.org/">Python</a> is an easy-to-learn modern
programming language with a simple yet elegant implementation of object
orientation. This post explains one dark corner of Python's implementation of
object orientation: metaclasses (but does so as if explaining the <a
href="http://www.bbc.co.uk/blogs/learningenglish/2011/09/howzat.shtml">rules
of cricket</a>).</p>

<p>Objects represent things. Type, <code>type(my_object)</code> to find out
what type of thing your object is. The type of thing an object represents is
defined by its "type". Classes define types of things to be instantiated as
objects. To be absolutely clear, objects represent types of things defined by
classes.</p>

<p>Now, listen carefully!</p>

<p>In Python, classes <strong>are also</strong> objects. This raises
the an important question: what type of thing is a class?</p>

<p>The answer is that a class is a type of thing that can instantiate objects.
This type of thing (a class's class) is a class's metaclass which, incidently,
in Python defaults to a special class called <code>type</code> ~ whose type
is, circularly, <code>type</code> (i.e. itself).</p>

<p>You can change the metaclass of a class by setting it's
<code>__metaclass__</code> attribute to a class that inherits from the
<code>type</code> class. With this sleight-of-hand you can control how classes
instantiate objects.</p>

<p>How? I'm so pleased you asked!</p>

<p>Override the new metaclass's <code>__new__</code> method.
Remember, this <code>__new__</code> method must return the return of a call
to the <code>type</code> class's <code>__new__</code> method so your new class
correctly instantiates a new object of the correct type.</p>

<p>Got it? Good!</p>

<p>:-)</p>
</description>
        <pubDate>Mon, 27 August 2012 01:00:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Europython 2012</title>
        <link>http://ntoll.org/article/europython-2012</link>
        <description><h1><a href="/article/europython-2012">Europython 2012</a></h1><p class="published_on">Thursday 9 August 2012 (12:00AM)</p>

<p>Europython was a month ago (early July) and I've been meaning to pull
together a write-up since. So here goes...</p>

<p>First of all, <a href="http://www.python.it/">Python Italia</a> are some
<em>seriously well organised</em> folks. I can't think of another programming
conference that was so smoothly executed. Add to that the food (yes, the FOOD!)
and location (Florence is a city everyone should take the time to visit) and
you have something akin to programmer utopia. I especially enjoyed several
UK Pythonistas and London Dojo attendees giving talks: Mike Sandford's talk on
<a href="https://ep2012.europython.eu/conference/talks/getting-the-logging-module-to-do-your-bidding">the logging module</a> was especially useful and Peter
Inglesby's "<a href="https://ep2012.europython.eu/conference/talks/discovering-descriptors">Discovering Descriptors</a>" was a fascinating dive into attribute access
(for non-geeks: yeah, I know... sounds <em>really</em> interesting right..?).</p>

<p>I gave a talk that combined my love of programming and music:</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/OTHggyZAot0" frameborder="0" allowfullscreen></iframe>

<p>It seemed to go quite well and the attendees (standing room only) seemed to
enjoy it. I was secretly pleased to have
<a href="https://en.wikipedia.org/wiki/Rickrolling">rickrolled</a> them all
(in Latin!) without any of them noticing (watch the video and see if you can
spot the offending slide). I was also delighted that many of the attendees
couldn't tell the difference between my computer generated music and that
composed by Mozart or Fux. In any case, all the code and the HTML/CSS for the
slides can be found <a href="https://github.com/ntoll/foox">on github</a>.</p>

<p>Finally, the best part of Europython was being able to attend with Mary
(but without our three children who were staying with grandparents). Not only
did we have a lot of of fun discovering Florence together but we were out
every evening enjoying the tastes, sights and sounds of that great city with
friends old and new. It was also fun for me because it gave Mary a
window into my (often quite abstract and inaccessible) world and see me give
my talk. Given that Europython 2013 will be in Florence again I suspect we'll
both be back next year.</p>

<p>What's next? Well, <a href="http://pyconuk.org">PyconUK</a> is just around
the corner and there's another <a href="http://nhshackday.com">NHSHackday</a>
soon! If you're going, say hi!</p>
</description>
        <pubDate>Thu, 09 August 2012 12:00:00 GMT</pubDate>
    </item>
    
    <item>
        <title>How to Run an Awesome Code Dojo</title>
        <link>http://ntoll.org/article/how-to-run-an-awesome-code-dojo</link>
        <description><h1><a href="/article/how-to-run-an-awesome-code-dojo">How to Run an Awesome Code Dojo</a></h1><p class="published_on">Wednesday 25 January 2012 (01:34PM)</p>


	<p><img src="/static/images/100.png" alt="Python Code Dojo" style="padding-left: 8px" align="right" /></p>

<p><a href="https://twitter.com/#!/atroche">Alistair Roche</a> recently <a href="https://twitter.com/#!/atroche/status/161775174604173312">tweeted</a> the following question:</p>

<blockquote>@ntoll Hey Nicholas, any chance I could get some advice from you on how to run an awesome coding dojo?</blockquote>

<p>This blog post is my answer.</p>

<p>I helped start the London Python Code Dojo with <a href="https://twitter.com/#!/tartley">Jonathan Hartley</a> and <a href="https://twitter.com/#!/otfrom">Bruce Durling</a> because I was learning Python and wanted to meet people I could learn from. Therein lies the essence of the dojo: a place to learn with/from other people.</p>

<p>The original dojo concept is explained at the <a href="http://codingdojo.org/">codingdojo.org</a> website. We started out with every intention of following the instructions. However, we've let our imaginations run and evolved the meetings to our group's dynamics and interests. If you run a dojo, so should you too (adapt).</p>

<p>Whereas codingdojo.org is quite formal and focussed on test-driven development (TDD) we have changed things in three major ways:</p>

<ol>

<li>expand the pair programming "randori" to encompass groups of no more than five participants</li>

<li>drop the TDD dogma, and</li>

<li>encouraged noise, debate and creativity.</li>

</ol>

<p>Working in groups was suggested by <a href="https://twitter.com/#!/ciaranmooney">Ciar&aacute;n</a> and makes the dojo a software version of <a href="http://en.wikipedia.org/wiki/Scrapheap_Challenge">Scrapheap Challenge</a>. Every group is given about an hour and a half to solve the same problem, at the end of the evening each group does a show and tell which ends up being a public code review cum question and answer session.</p>

<p>Although I practice TDD I personally dislike pushing any "one true" methodology on people. There are times when TDD is the worst thing to do (I'll explain why in another blog post) and I personally feel it's important to let people discover so-called good practice for themselves by observing it in use rather than being told to do it.</p>

<p>It soon became clear that encouraging noise, debate and "creativity" leads to a buzz in the room and lots of energetic intellectual interaction between participants. I once overheard someone (it might have been <a href="https://twitter.com/#!/tomviner">Tom Viner</a> but I might be wrong) explain that the London Python code dojo is to the original dojo concept as an improvisation in a jazz club is to a string quartet recital.</p>

<p>So here's the London dojo recipe:</p>

<ul>

<li>We limit the number of tickets to around thirty to make the evening easier to manage (it's like herding cats).</li>

<li>Start with a social element. For us it's pizza and beer. Not only is it a good way to welcome new members but it is also a great community building mechanism. Several people have found jobs via the connections made in the pre-code social.</li>

<li>During the social element we encourage people to write ideas for the evening's problem on a white/black-board or flip chart. Good ideas are usually algorithmic in nature and very specific. Recent examples include:

<ul>

<li>Game solving algorithms: Boggle, Mastermind and Tic-Tac-Toe.</li>

<li>Creating a simple game: Hunt the Wumpus clone.</li>

<li>Problem solving: Maze navigation.</li>

<li>An adventure game where each month we create a new aspect of the game: world representation, parser, keeping game state, puzzles and so on.</li>

</ul>

Sometimes we start the evening with a presentation of some sort of problem or Python module and we use that as the basis of the group coding. For example, we all created animated Christmas cards with PyGame.

</li>

<li>The "organiser" convenes the coding session by calling for a vote on the problems suggested during the social part of the evening. We usually work out the top three ideas then take a second vote to decide a winner.</li>

<li>The "organiser" randomly assigns everyone a group.</li>

<li>There follows one and a half hours of furious coding with the organiser calling out half-hour intervals.</li>

<li>Finally, once the time is up every group does a show and tell where we need to see their code running (or not as the case may be) followed by a code review. For me, this is the best (and funniest) part of the evening.</li>

</ul>

<p>If you want to know more, come to a dojo! Alternatively, you may be interested in the slides from a presentation I gave at Europython in 2011 on running the code dojo:</p>

<div style="width:425px" id="__ss_8434980"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/ntoll/the-london-python-code-dojo-an-education-in-developer-education" title="The London Python Code Dojo - An Education in Developer Education" target="_blank">The London Python Code Dojo &#8211; An Education in Developer Education</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/8434980" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/ntoll" target="_blank">Nicholas Tollervey</a> </div> </div>

<p>Last, but definitely not least, many thanks to my co-dojo-cat-herders <a href="https://twitter.com/#!/tomviner">Tom Viner</a>, <a href="https://twitter.com/#!/tjguk">Tim Golden</a>, <a href="https://twitter.com/#!/tartley">Jonathan Hartley</a> and <a href="https://twitter.com/#!/otfrom">Bruce Durling</a></p>



 

</description>
        <pubDate>Wed, 25 January 2012 13:34:00 GMT</pubDate>
    </item>
    
</channel>
</rss>