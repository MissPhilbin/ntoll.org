<?xml version"1.0" ?>
<rss version="2.0">
<channel>
    <title>ntoll.org ~ everything I say is false</title>
    <link>http://ntoll.org/</link>
    <description>The personal website of Nicholas H.Tollervey</description>
    <image>
        <url>http://ntoll.org/static/images/logo.png</url>
        <link>http://ntoll.org/</link>
    </image>
    
    <item>
        <title>Programming ~ Concise and Simple</title>
        <link>http://ntoll.org/article/programming-concise-and-simple</link>
        <description><h1><a href="/article/programming-concise-and-simple">Programming ~ Concise and Simple</a></h1><p class="published_on">Wednesday 30th January 2012 (08:00AM)</p>

<p>(As with all "<a href="/article/concise-and-simple">concise and simple</a>"
articles I assume no prior knowledge of the subject and keep the length to
less than 1500 words.)</p>

<p>This is a personal reflection on programming: the creation and curation of
instructions that make computers do things. Instructions (also known as
"<a href="https://en.wikipedia.org/wiki/Source_code">source code</a>" or just
"code") are organised into
<a href="https://en.wikipedia.org/wiki/Computer_program">programs</a> (or
"<a href="https://en.wikipedia.org/wiki/Software">software</a>") that fulfil
specific
tasks. People who write programs are called
<a href="https://en.wikipedia.org/wiki/Programmer">programmers</a>,
developers, software engineers or (colloquially)
<a href="https://en.wikipedia.org/wiki/Hacker_(term)">hackers</a>.</p>

<p><img src="/static/images/code.png" alt="code"/></p>

<p>Instructions are expressed in
<a href="https://en.wikipedia.org/wiki/Programming_language">programming languages</a>
that make it easier for humans to comprehend what is going on. So-called "high
level" languages are easier for humans to work with than "low level" languages
that express things in a way that is closer to the way the computer works. In
all cases programs are transformed from the original programming language into
the <a href="https://en.wikipedia.org/wiki/Machine_code">binary
instructions</a> that cause the computer to function in a particular way.
This transformation can happen in two ways:</p>

<ul>
    <li>The program is "compiled" in to binary instructions by a special
    program called a
    <a href="https://en.wikipedia.org/wiki/Compiler">compiler</a>. The result
    is an "<a href="https://en.wikipedia.org/wiki/Executable">executable</a>"
    run by the end user.</li>
    <li>The program is "interpreted" by an <em>executable</em>
    <a href="https://en.wikipedia.org/wiki/Interpreter_(computing)">interpreter</a>
    whose function is to act as a sort of on-the-fly translator of the
    instructions.</li>
</ul>

<p>Both mechanisms have strengths and weaknesses. Because compiled programs
have already been transformed in to the computer's binary instructions they
are often much faster than interpreted programs where such
transformations happen as the program is running. Yet interpreted programs
offer the flexibility of adapting and changing themselves while they are run by
the interpreter which makes it easier to solve certain sorts of programming
problem. Sometimes a combination of these techniques is used:
A <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">JIT</a>
compiler will interpret until certain sets of instructions are
obviously more frequently used, at which point <em>only the popular sets of
instructions</em> get compiled "just in time" to make them faster.</p>

<p>Sometimes programs work as expected and produce valuable results. More often
they do not. The failure to make a computer work usefully is called a
<a href="https://en.wikipedia.org/wiki/Computer_bug">bug</a>.
There are generally two sorts of bug: the wrong outcome is correctly
implemented (the design is wrong) or the expected outcome is wrongly
implemented (the instructions are wrong). In any case, because computers are
complex machines making them do something useful is surprisingly hard.</p>

<p>Managing and taming complexity is one of the core tasks of a programmer. A
common piece of advice given to junior developers is
"<a href="https://en.wikipedia.org/wiki/Keep_it_simple_stupid">kiss</a>"
(keep it simple, stupid!), for there are fewer things that could go wrong. As
computing pioneer <a href="https://en.wikipedia.org/wiki/Tony_Hoare">Tony
Hoare</a> explains,</p>

<blockquote>"There are two ways of constructing a software design: One way is
to make it so simple that there are obviously no deficiencies, and the other
way is to make it so complicated that there are no obvious deficiencies. The
first method is far more difficult."</blockquote>

<p>Personally, I think creating simple and useful software is more like
writing succinct yet powerful prose than opaque logical wizardry. This has
an important side effect: simple and coherent code is easy to understand. Code
that is easy to understand is easy to maintain. Maintaining code is the act of
fixing bugs and curating instructions so things work efficiently (also known
as <a href="https://en.wikipedia.org/wiki/Code_refactoring">re-factoring</a>).
In this way a program is easy to improve as bugs are found and new features
implemented.</p>

<p>Some languages have been created with the explicit aim of making code
easy to read and understand (such as <a href="http://python.org">Python</a>).
Some developers promote certain development styles that they claim encourages
programmers to produce high quality software. A classic example of this is
<a href="https://en.wikipedia.org/wiki/Test-driven_development">test driven
development</a> where developers write a failing test encapsulating a feature
of their program before actually implementing the feature itself so the
test eventually passes. Others (such as
<a href="https://en.wikipedia.org/wiki/Donald_Knuth">Donald Knuth</a>) have
tried to promote a
<a href="https://en.wikipedia.org/wiki/Literate_programming">literate style of
programming</a> where code is interspersed with natural language explanations
that tell the "story" of the code.</p>

<p>Another core skill of a programmer is de-constructing and analysing the
problem that they are trying to solve. Often the problem is expressed in a
vague and open-ended way and it is the task of the developer to precisely
constrain the scope of the problem to enable them to create some
useful outcome. A personal example from my first programming class illustrates
this beautifully: my tutor explained that programs were merely instructions
and that we had five minutes to write instructions telling him how to switch
on the lights of the classroom. How hard could it be to write such
instructions? Take a minute to think about what <em>you</em> would write (you
may assume that the person following them knows about directions, actions and
names of things).</p>

<p>I can still remember my list:</p>

<ul>
    <li>Stand up.</li>
    <li>Look around until you locate the light switch.</li>
    <li>Walk in the direction of the switch.</li>
    <li>Press the switch with your fingers.</li>
    <li>Retrace your steps.</li>
    <li>Sit down.</li>
</ul>

<p>Of course, I failed miserably. My tutor pointed out that he was already
stood up, there were desks between him and the light switch and the damn lights
were already on anyway. Thus, what appeared to be a simple problem
(tell me how to switch on the lights) turned out to be far more complex than
first imagined.</p>

<p>Time and resources are also essential elements of software development:</p>

<p>First, the developer needs to have a feel of how best to organise the
program.  This means analysing their implementation of the
<a href="https://en.wikipedia.org/wiki/Algorithm">algorithm</a> (the
instructions at a conceptual level) to ensure that it is both timely and makes
efficient use of resources like the computer's memory and
<a href="https://en.wikipedia.org/wiki/Cpu">CPU</a>. Often
this is expressed using <a href="https://en.wikipedia.org/wiki/Big_O_notation">big-O</a> notation.</p>

<p>Second, programming usually involves a deadline. Customers need to know how
much time it will take to finish software given a certain number of developers
and some sort of collaborative development process. I've heard this described
as "the cat herding problem". For example, Fred Brooks
<a href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month">famously observed</a>
that adding developers to a struggling project only slows it down further.
Furthermore, clients change their minds mid-project (in addition to providing
vague problems like the one mentioned above) and there are always
<a href="https://en.wikipedia.org/wiki/There_are_known_knowns">unknown
unknowns</a> that add unforeseen time and effort to the project. If this were
not enough, how do you coordinate teams of programmers who are all working on
the same software?  It's like trying to get ten people to co-author a novel
<em>at the same time</em>.</p>

<p>Happily, developers have created methods and tools to help them work
together. Small autonomous
"<a href="https://en.wikipedia.org/wiki/Agile_software_development">agile</a>"
teams are preferred over large managed cohorts of developers.
<a href="https://en.wikipedia.org/wiki/Issue_tracking_system">Issue tracking
systems</a> make it easy for clients to request and prioritise features,
report bugs and give developers a clear audit trail upon which to base
development decisions. Code is stored in
<a href="https://en.wikipedia.org/wiki/Revision_control">version control
systems</a> that allow developers to track each other's changes and
resolve any conflicts in the software (for example, when two people edit the
same piece of code). In fact, developers have become so good at this sort of
thing that others are borrowing these tools and techniques (such as
lawyers collaborating on complex legal documents using a version control
system).</p>

<p>Finally, programming is a political activity: making software
means defining the laws that dictate how the digital world should be. Often
this obvious fact is left unacknowledged. However, incumbent interests affected
by the rise of digital culture (for example, the so-called "creative"
industries represented by organisations such as the
<a href="https://en.wikipedia.org/wiki/RIAA">RIAA</a>,
<a href="https://en.wikipedia.org/wiki/MPAA">MPAA</a> and their ilk)
have attempted, with some success, to change the law to limit the use of file
sharing software used to distribute pirated content.</p>

<p>Yet, programmers have turned the law to their advantage.
<a href="https://en.wikipedia.org/wiki/Richard_Stallman">Richard Stallman</a>,
founder of the <a href="http://fsf.org/">Free Software Foundation</a> (FSF),
was fed up with closed dis-empowering software so set out
<a href="https://www.gnu.org/philosophy/free-sw">four essential
freedoms</a>:</p>

<ul>
    <li>The freedom to run the program, for any purpose (freedom 0).</li>
    <li>The freedom to study how the program works, and change it so it does
    your computing as you wish (freedom 1). Access to the source code is a
    precondition for this.</li>
    <li>The freedom to redistribute copies so you can help your neighbor
    (freedom 2).</li>
    <li>The freedom to distribute copies of your modified versions to others
    (freedom 3). By doing this you can give the whole community a chance to
    benefit from your changes. Access to the source code is a precondition for
    this.</li>
</ul>

<p>These freedoms are enshrined in the
<a href="https://www.gnu.org/licenses/gpl">General Public License</a> (GPL) -
a license that subverts copyright (that seeks to expand the rights of creators
at the expense of the rights of others) in to copy<em>left</em> (that seeks to
expand the rights of everyone). There is one important exception that limits
everyone: any modifications to source code should also be freely available
under the GPL. While the GPL has been described as "communist",
"un-American" and "cancerous", it is important to point out that the GPL is not
anti-commerce and (I think intentionally) does not mention political
motivations. Code covered by the GPL can be sold. It's how the FSF first raised
money for their cause.</p>

<p>There's a sentiment gaining in popularity: program, or be programmed. If you
would like to learn to program, there are
<a href="https://www.khanacademy.org/cs/tutorials/programming-basics">plenty</a> of
<a href="https://www.udacity.com/courses">resources</a> available
<a href="https://www.coursera.org/category/cs-programming">online</a>.

<p><small>1499 words. Image credits: &copy; 2013 the author with
<a href="http://instacode.linology.info/17689">this service</a>.</small></p>
</description>
        <pubDate>Wed, 30 January 2013 08:30:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Northackton Magic Marble Machines</title>
        <link>http://ntoll.org/article/northackton-marbles</link>
        <description><h1><a href="/article/northackton-marbles">Northackton Magic Marble Machines</a></h1><p class="published_on">Monday 21st January 2013 (10:45PM)</p>

<p>This evening I attended another friendly
<a href="http://northackton.stdin.co.uk/blog/">Northackton</a> meeting (my
local <a href="https://en.wikipedia.org/wiki/Hackerspace">hackerspace</a>). It
was great to see so many people turn out for a "build your own marble machine"
workshop. I took along two of my kids to join in the fun: Penelope
(11) and Sam (8).</p>

<p>As with the previous
<a href="/article/northackton-useless-machine">useless machine</a> workshop we
were joined by friend-of-Northackton and maker-extraordinaire
<a href="https://sites.google.com/site/msraynsford/">Martin Raynsford</a>
who has set himself the task of providing 365 laser cut items in 365 days. He
provided us with a nifty
<a href="http://msraynsford.blogspot.co.uk/2012/12/project-7-marble-machine-1.html">marble machine</a>
~ a laser cut wooden mechanism that's easy to assemble with just a craft
knife, wood glue and a screw driver. If you email Martin he'll supply the
necessary files for you to cut your own mechanism or will sell you the pre-cut
kits that we were using. Furthermore, his blog is definitely worth a read and
packed full of all sorts of interesting projects (the
<a href="http://msraynsford.blogspot.co.uk/2012/08/lizard-spiral.html">Escher Lizards</a>
particularly caught my eye).</p>

<p>Both Penelope and Sam had a great time to the extent that Penelope was
trying to work out how she could attend again despite having a string
orchestra rehearsal on Monday evenings.</p>

<p>Here's Sam demonstrating the contraption we built together:</p>

<p><iframe width="420" height="315" src="https://www.youtube-nocookie.com/embed/vsFu_dt73tY?rel=0" frameborder="0" allowfullscreen></iframe></p>

<p>I love how he's so engrossed in tweaking the spiral and chute (especially at
the end of the clip). Penelope was also rather distracted by last minute
adjustments to her solo effort:</p>

<p><iframe width="420" height="315" src="https://www.youtube-nocookie.com/embed/t6LKPgWuel4?rel=0" frameborder="0" allowfullscreen></iframe></p>

<p>Why don't schools make use of such fun, easy-to-build and interesting
models? It certainly beats the plastic key ring I "made" over six weeks when I
was at school.</p>
</description>
        <pubDate>Mon, 21 January 2013 22:45:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Peer to Peer ~ Concise and Simple</title>
        <link>http://ntoll.org/article/p2p-concise-and-simple</link>
        <description><h1><a href="/article/p2p-concise-and-simple">Peer to Peer ~ Concise and Simple</a></h1><p class="published_on">Monday 14th January 2013 (08:00AM)</p>

<p>(As with all "<a href="/article/concise-and-simple">concise and simple</a>"
articles I assume no prior knowledge of the subject and keep the length to
less than 1500 words.)</p>

<p>What is the <a href="https://en.wikipedia.org/wiki/Aret%C4%93">best way</a>
to organise diverse entities co-existing together in large dynamic groups? How
are such arrangements created? Who is responsible for making things work?</p>

<p>These are important questions in
<a href="https://en.wikipedia.org/wiki/Political_philosophy">political philosophy</a>
and
<a href="/article/internet-concise-and-simple">Internet</a> engineering and
show that both subjects, at an abstract level, share much in common.
From a political perspective the first question can be answered with
different forms of government, the second by investigating concepts like
justice, rights and law while the third question concerns the role of power
and authority. From a technological perspective the first question concerns
"architecture" (how computational resources fit together), the second is
answered by process, requirements and design while the third question concerns
capability, roles, standards and (again) authority.</p>

<p>This post concerns
<a href="https://en.wikipedia.org/wiki/Peer-to-peer">peer to peer</a>
(P2P) architecture ~ where peers of
equal status (devices running appropriate software) cooperate in a loose
decentralised network for mutual benefit. Peer to peer is the antithesis of
hierarchy - where some have elevated status and power over others. The image
below illustrates how this changes the way devices connect and communicate. The
peer to peer network on the left is simply a collection of devices (in blue)
with different numbers of connections between them (in grey). The right hand
image is the classic client (blue) / server (red) hierarchy where many
clients rely on a single server to fulfil their functionality.</p>

<p><img src="/static/images/topology.png" alt="p2p v client/server topology"/></p>

<p>Sometimes it is important to have hierarchy: it is best that a consultant
surgeon is in charge of an operation rather than a well-meaning democracy of
volunteers. In an ideal world, hierarchy is best when the obvious skill,
knowledge and capabilities of an entity are acknowledged to bring about
greater benefit for all. In an ideal world, those with elevated status and
authority would have earned it via reliable and consistent public displays of
such skill, knowledge and capabilities. In an ideal world, the responsibility
and trust associated with status and authority would be a serious yet welcome
obligation. Unfortunately, we do not live in an ideal world and hierarchy is
often the cause of much that is bad and frustrating.</p>

<p>Some technologies, such as
<a href="/article/the-web-concise-and-simple">the web</a>,
are hierarchical and inadvertently introduce leverage points used to
exploit or gain power over users. The web has a <em>client/server</em>
architecture where information and the capabilities to change information
are firmly within the realm of the server (the website). The client, using a
browser, has to request the server deliver information <em>to them</em> and
make changes <em>for them</em>. Unfortunately, user's data is often stored and
delivered in a way that makes it hard to migrate between services. Personal
data is analyzed by websites and sold via targeted advertising or (worse)
handed to governments and other third parties without explicit consent.
Disruption ensues when websites break: there's no way to get important
documents if the server is down. The client/server model is centralisation of
power and websites are single points of failure.</p>

<p>Contrast the web with peer to peer architecture where the loose and
decentralised organisation of computing resources make it <em>very hard for
third parties to control</em> users. This simple idea can be illustrated
by two popular yet different peer to peer systems:
<a href="http://www.bittorrent.com/">Bittorrent</a> (for sharing
large digital assets such as audio and video files) and
<a href="http://bitcoin.org/">Bitcoin</a> (a decentralised digital
currency).</p>

<p>For Bittorrent, Bitcoin and many other peer to peer systems the three
questions I asked at the start can be answered thus:</p>

<ol>
    <li>The most effective way to organise a diverse and dynamic group of
    participants is with peer to peer architecture (this can be for both
    technical and political reasons).</li>
    <li>The means of creating such a network is via an open protocol describing
    the expected behaviour of participants (including checks to ensure
    correctness).</li>
    <li>It is the participant's responsibility that they correctly implement
    the protocol in order to make the system function correctly.</li>
</ol>

<p>Bittorrent is an incredibly efficient way to share large files <em>because
of</em> its peer to peer architecture. Imagine that you wanted me to copy
a paper edition of
<a href="https://en.wikipedia.org/wiki/War_and_Peace">War and Peace</a>.
I'd probably photocopy and give you every page in order. It's how
large files are usually downloaded: linearly from server to client.
Unfortunately, if I were busy or, worse still, had lost my
original you wouldn't get a copy. Bittorrent works differently: it's better if
I told you who else had a copy so you could ask them to provide <em>different
pieces</em> of the original that you then collated. This is faster because your
peers share the work concurrently. Furthermore, if one of the peers failed to
deliver their piece you'd notice it was missing and request it from another.
Therefore, there is no single point of failure. Finally, if someone else wanted
a copy then <em>you</em> could provide pieces even if you'd not yet received
the complete work. As a result peers <em>give as well as take</em> value from
the network.</p>

<p>In reality, users download a "torrent" file containing details of the
resource they're interested in and who to ask for it. They become a node on the
bittorrent network and request pieces from the identified peers. As
clients download and re-assemble the pieces of the file, others on the network
request pieces in turn. Thus, it takes a relatively short time
for large files to be delivered. Furthermore, popular files spread around the
network and become easier to deliver since there are more peers to provide
pieces.</p>

<p> Some websites (most famously the
<a href="http://thepiratebay.se/">PirateBay</a>) collect torrent files and
provide search facilities. Other sites, called "trackers", monitor which peers
have what files - although more recent versions of bittorrent
allow peers to do this themselves. The video below, made by the
creators of bittorrent, provides a good summary:</p>

<p><iframe width="420" height="236" src="https://www.youtube-nocookie.com/embed/NYTvTPrgSiM?rel=0" frameborder="0" allowfullscreen></iframe></p>

<p>The superior performance,
<a href="http://www.ipoque.com/sites/default/files/mediafiles/documents/internet-study-2008-2009.pdf">huge</a>
<a href="http://www.bittorrent.com/intl/es/company/about/ces_2012_150m_users">number</a> of
<a href="http://www.fastcompany.com/1714001/bittorrent-has-more-users-netflix-and-hulu-combined-and-doubled">users</a>
and uncontrollable availability of pirated content
has led the incumbent "creative" industry to disrupt illegal sharing
through legal, economic and political means (for example, the PirateBay is
censored within the UK). This is
<a href="http://tpb.piraten.lu/">easier said than done</a> and in no way
changes the effectiveness of the Bittorrent network itself. Users quickly find
<a href="http://www.ichi.co.uk/post/22269260925/bypassing-the-uk-pirate-bay-blocks-via-proxies-mirrors">other means</a> of finding torrent files.</p>

<p>Bittorrent uses a peer to peer architecture because it is the best technical
solution. The legal, economic and political fallout emerged later. In contrast,
Bitcoin had political and economic motivations from the start and peer to peer
enables such ends.</p>

<p>Bitcoin is a decentralised digital currency based upon an
<a href="https://en.bitcoin.it/wiki/Protocol_specification">open protocol</a>.
Unlike regular currency, controlled by banks and governments, Bitcoin is
designed to have <em>no central issuing authority and instead relies on the
machinations of the protocol to regulate balances, transactions and the issuing
of currency</em>. Like cash, transactions can be anonymous. Bitcoins can be
subdivided into 100-million smaller units called "satoshis" and, at the time of
writing, one bitcoin is worth just over
<a href="http://bitcoincharts.com/charts/mtgoxGBP">&pound;8.82</a>.</p>

<p>Transactions reference Bitcoin addresses created by the potential recipient.
A Bitcoin user can have many Bitcoin addresses and may even decide to use one
address per transaction. They simply identify the recipient:</p>

<p><pre><code>1HcrwtLrbe97aRBD5KCn5izumXp8N7nXcS</code></pre></p>

<p>Sometimes they are displayed as QR-codes to be scanned by mobile
phones: </p>

<p><img src="/static/images/bitcoin-address.png" alt="A bitcoin address"/></p>

<p>Assuming a positive balance you can transfer bitcoins to me using the
Bitcoin address above (you can't have a negative Bitcoin balance). Your
Bitcoin software publishes and
<a href="/article/public-key-crypto-concise-and-simple">cryptographically
signs</a> the details of the transaction and peers check and verify the
details before adding it to a set of recent transactions called a "block".
Blocks are distributed around the network so balances and transfers
are tracked to avoid double spending. The protocol is designed so attackers
would need impossibly large amounts of time and computing power in order
to subvert the chain of blocks tracking transactions.</p>

<p>New Bitcoins are "discovered" by peers on the network as a reward for
solving the computationally hard problem that is part of the process for
creating new transaction blocks. The difficulty of the problem is adjusted by
the protocol to ensure that bitcoins are issued at a consistent rate. This
process is called "mining" and the supply of bitcoins will never exceed 21
million. When this limit is reached miner's efforts will be rewarded with a
small transaction fee. The video below explains Bitcoin from an end user's
perspective:</p>

<p><iframe width="420" height="236" src="https://www.youtube-nocookie.com/embed/Um63OQz3bjo?rel=0" frameborder="0" allowfullscreen></iframe></p>

<p>Bitcoin is complex and many details have been hidden in my explanation.
However, it is an open and audited technology and hundreds of thousands of
people trust it enough to use it every day.</p>

<p>Concerns have been raised about tax-avoidance, anonymous payment for illegal
goods and fraud via the use of Bitcoin but this also applies to traditional
currencies. Ultimately, the peer to peer nature of Bitcoin is the mechanism for
liberating users from the interference of banks and governments. It remains to
be seen if Bitcoin will become popular and disrupt the financial system in the
same way that Bittorrent has done with content delivery.</p>

<p>Peer to peer systems challenge the status-quo with a decentralising power
shift. Furthermore, creating such technology is far easier and more effective
than traditional means of political change.</p>

<p><a href="https://www.youtube.com/watch?v=NV51gU00oqc">The times, they are
a-changin'</a>.</p>

<p>:-)</p>

<p><small>1499 words. Image credits: &copy; 2013 the author.</small></p>
</description>
        <pubDate>Mon, 14 January 2013 08:00:00 GMT</pubDate>
    </item>
    
</channel>
</rss>