<?xml version"1.0" ?>
<rss version="2.0">
<channel>
    <title>ntoll.org ~ everything I say is false</title>
    <link>http://ntoll.org/</link>
    <description>The personal website of Nicholas H.Tollervey</description>
    <image>
        <url>http://ntoll.org/static/images/logo.png</url>
        <link>http://ntoll.org/</link>
    </image>
    
    <item>
        <title>Northackton and the Useless Machine</title>
        <link>http://ntoll.org/article/northackton-useless-machine</link>
        <description><h1><a href="/article/northackton-useless-machine">Northackton and the Useless Machine</a></h1><p class="published_on">Sunday 18th November 2012 (05:30PM)</p>

<p>When time permits I really enjoy attending
<a href="http://northackton.stdin.co.uk/blog/">Northackton</a>, a local hacker
/ maker group. Last Monday I took my middle son, Sam (8 years old), along to
a meeting advertised as a "geek santa" session - an opportunity for attendees
to build a geeky gift for a loved one in time for Christmas.</p>

<p>We were all there to make
<a href="http://www.instructables.com/id/The-Most-Useless-Machine/step1/Background/">useless machines</a> - wonderfully quirky devices imagined by
<a href="http://en.wikipedia.org/wiki/Artifical_Intelligence">Artificial Intelligence</a> pioneer
<a href="http://en.wikipedia.org/wiki/Marvin_Minsky">Marvin Minsky</a>
and first built by the father of <a href="http://en.wikipedia.org/wiki/Information_Theory">information theory</a>,
<a href="http://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon</a>.</p>

<p>Between ten to fifteen of us turned up to be greeted by
friend-of-Northackton <a href="https://sites.google.com/site/msraynsford/">Martin Raynsford</a>.
Martin provided us all with kits (also available via
<a href="http://msraynsford.blogspot.co.uk/2011/12/new-smaller-useless-box.html">his website</a>), instructions, encouragement and a helping
hand when required. After a couple of hours we were all the proud owners of a
working useless machine! Sam was especially pleased because he had a go
soldering and the other attendees were very patient (and welcoming) by
answering all his inevitable questions. He was also very impressed with the
well provisioned <a href="https://en.wikipedia.org/wiki/Tuck_shop">tuck
shop</a> (lots of chocolate and crisps!).</p>

<p>But, what is a useless machine..? I'll let Sam explain...</p>

<object width="420" height="315"><param name="movie" value="http://www.youtube.com/v/uPveo7I_yoQ?version=3&amp;hl=en_GB&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/uPveo7I_yoQ?version=3&amp;hl=en_GB&amp;rel=0" type="application/x-shockwave-flash" width="420" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>

<p>If you ever find yourself in the Northampton area and at a loose end on
a Monday evening, visit the <a href="http://northackton.stdin.co.uk/blog/">Northackton website</a>
and check if there's a meeting, come along and say "hi". You could also
<a href="http://twitter.com/northackton">follow the group on Twitter</a>.</p>

</description>
        <pubDate>Sun, 18 November 2012 17:30:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Test Driven Development Cargo Cult</title>
        <link>http://ntoll.org/article/tdd-cargo-cult</link>
        <description><h1><a href="/article/tdd-cargo-cult">Test Driven Development Cargo Cult</a></h1><p class="published_on">Monday 5th November 2012 (08:00AM)</p>

<p>The <a href="/article/how-to-run-an-awesome-code-dojo">London Python Code
Dojo</a> is a great place to share ideas and collaborate
with an enthusiastic and friendly group of peers. I'm going to tell the story
of an interesting outcome from last Thursday's dojo - organised with great
aplomb by Python core developer and Windows guru
<a href="https://twitter.com/tjguk">Tim Golden</a>.</p>

<p>We departed from the usual democratic method of choosing a dojo task: Tim
decided that as we regularly solved problems concerning board games it would
be good to produce a "one true board" code library to re-use in future dojos.
To this end Tim created a <a href="https://github.com/ldnpydojo/board">Github
repository</a> containing a single README.rst file containing requirements.
We were to fork the repository, create a directory for our team's code and send
a pull request after the dojo so posterity could have a good laugh at our
solutions.</p>

<p>I found myself in a team with general all-round-nice-guy-and-man-about-the-technological-town <a href="https://twitter.com/rrees">Robert Rees</a>.
He's a hugely experienced, well read and thoughtful senior developer
/ architect at <a href="http://guardian.co.uk">The Guardian</a>. He's also
always ready to step up to share his successes, failures and discoveries with
others (he opened the evening with an excellent lightning talk on functional
programming with Python). Once again, he proved to have an excellent eye
for a learning opportunity...</p>

<p>During the team discussion Robert suggested we work using strict test
driven development (TDD): focus on a specific thing that needed implementing,
write a test for just that thing, make it pass then rinse and repeat until all
requirements are met with no failing tests. We took it in turns to write code.
At the end of each turn the "programmer" wrote a failing test for the next
person in the group to solve, and so the cycle continued. Given that we had
very clear requirements in the form of Tim's README file this was an excellent
suggestion on Robert's part.</p>

<p>Thanks to Robert, what happened next was both funny and educational...</p>

<p>I set up the basic scaffolding for the project and Robert quickly created a
"Board" class containing some stubbed out yet obvious methods and an associated
test stub. Team-mate and <a href="http://www.pygame.org/">Pygame</a> core
developer <a href="https://twitter.com/renedudfield">Rene Dudfield</a> read
out the next requirement,</p>

<blockquote>"You should be able to put something at a coordinate on the
board."</blockquote>

<p>A suitable test was written and the next team member (another Nick) sat in
the hot seat. Rather than implement a complex or complete solution to the
requirement he was encouraged, in true TDD fashion, to do the minimum to make
the test pass. So, he hard coded the return value expected by the test, in this
case the string <code>"Foo"</code>.</p>

<p>It was at this point that I made the mistake of opening my big mouth
(again). I said something along the lines of, "the problem with unit tests are
that they're behaviourist in outlook: they don't ensure that the internal
quality of the solution is any good - simply that the solution passes some
tests" i.e. it displays such-and-such a behaviour.</p>

<p>I was referring to the <a href="https://en.wikipedia.org/wiki/Behaviorism">
behaviourist movement</a> founded by
<a href="https://en.wikipedia.org/wiki/John_B._Watson">J.B.Watson</a> where
things can only be defined in terms of observable behaviours - there is no room
for introspection. When taken to an extreme, behaviourist philosophy claims
that a person has no consciousness but is simply a thing that behaves. Of
course, there are problems with this outlook. The obvious question of what is
meant by "behaviour" is far more difficult to answer than it at first appears.
More problematic, behaviourism seems counter to personal "internal" experience:
pain, love, sadness and joy are common feelings yet may not be manifested in
externally observable behaviour. Furthermore, behaviours associated with such
feelings can be easily and convincingly aped (for example, by actors or con
artists) which may even be a requirement for more complex interactions such as
irony (where you act one way but mean something else - often the opposite to
how you act).</p>

<p>Given that we were enjoying the silly exercise of making tests pass with the
minimum of effort Robert stepped up with a new challenge: he would write a
test to force the development of something sensible. This would show that test
driven development inevitably leads to a good solution by forcing us to make
the failing test pass.</p>

<p>We found Robert had written the following:</p>

<pre><code class="python">def test_pieces_are_placed_and_restored(self):
    width = 4000
    height = 4000
    board = Board(width, height)
    pieces = [(random.randint(0, width), random.randint(0, height),
              {"i": random.randint(0, 5000)}) for x in
              range(0, random.randint(0, 57000))]
    for piece in pieces:
        board.place(piece[0], piece[1], piece[2])
        self.assertEquals(board.get(piece[0], piece[1])["i"], piece[2])
    self.assertEquals(len(board.contents()), len(pieces))</code></pre>

<p>His test creates a huge board, places random pieces at random locations on
the board, checks that expected pieces are found in the correct location on the
board and finally ensures the board's "contents" contain the same number of
pieces that the test randomly created.</p>

<p>Surely we had to write a quality solution to make such a test pass?</p>

<p>I'm ashamed to say that we met Robert's challenge by intentionally creating
a monster (including suggestions from Robert himself). At the top of our board
module we wrote this:</p>

<pre><code class="python">import random
random.seed('robert rees was here')</code></pre>

<p>Then we updated the <code>Board</code> class's <code>get</code> method
to:</p>

<pre><code class="python">def get(self, x, y):
    if self.max_x == 4000:
       # Take that @rrees
       if not hasattr(self, 'rrees'):
           random.seed('robert rees was here')
           width = self.max_x
           height = self.max_y
           self.rrees = [(random.randint(0, width), random.randint(0, height),
                         {"i": random.randint(0, 5000)}) for x in
                         range(0, random.randint(0, 57000))]
           self.counter = 0
       result = self.rrees[self.counter]
       self.counter += 1
       return {'i': result[2]}
   else:
       return "Foo"</code></pre>

<p>Our solution re-set the random number generator's seed to <code>"robert
rees was here"</code> so the resulting sequence of "random" numbers was
deterministic (i.e. they would always be the same set of random-ish numbers -
one of the reasons why it's more correct to call these sorts of things a
pseudo-random number generator). Then we copied the code from Robert's unit
test to return the result that the test expected. The outer <code>if</code>
statement ensured that we return the correct result depending on different
tests that set the board to different sizes - Robert's test set the dimensions
to 4000x4000 whereas another, as was mentioned before, expected the result
<code>"Foo"</code>.</p>

<p>This is, of course, an abomination.</p>

<p>However, it allowed us to play our parts in the ruse that started our
"show-and-tell" presentation. We explained we had carefully linked tests to
requirements in Tim's README file and talked through the programming cycle I
explained earlier to ensure everyone had a go at writing code. We even audited
the unit tests in front of the assembled dojo and ran the test suite so people
could see that everything was working in accordance with the tests. It was only
until we revealed the code for the actual <code>Board</code> class that the
joke was discovered.</p>

<p>And so we get to the point of this blog post: test driven development is
promoted as the <em>one true way to great code</em>. Our activity in the dojo
shows that this is not the case. Although we were nefarious in our intent a
similar result (abominable code) could easily be produced through inexperience,
laziness or lack of care and attention while still <em>doing</em> TDD.</p>

<p>The "test-driven" dogma is dangerous: it claims to improve the quality of
code so long as you follow its modus operandi. At best this fosters a false
sense of security, at worse it's simply a cargo cult.</p>

<p>I think having <strong>well tested code is a useful and often essential
element of great software</strong>. I'm not saying "you shouldn't test code!"
(you most definitely should). Rather, I'm concerned that TDD apologists do more
harm than good by promoting a cargo cult. Testing software is a good thing
and sometimes writing tests before implementing a feature is the right thing
to do. But this is simply evidence of the most important element that leads to
great code - an element that, unfortunately, is not mentioned by TDD - the
wisdom of the programmer.</p>

<p>What do I mean?</p>

<p>I mean the state where knowledge, experience and trust coincide with the
understanding and confidence to do the "right thing" rather than follow a list
of precepts.</p>
</description>
        <pubDate>Mon, 05 November 2012 08:00:00 GMT</pubDate>
    </item>
    
    <item>
        <title>PyconUK 2012</title>
        <link>http://ntoll.org/article/pyconuk2012</link>
        <description><h1><a href="/article/pyconuk2012">PyconUK 2012</a></h1><p class="published_on">Tuesday 9th October 2012 (09:30PM)</p>
<img src="/static/images/snakes.png" alt="PyconUK snakes" style="float:right; padding: 8px;"/>

<p>It was <a href="http://pyconuk.org">PyconUK</a> 2012 over the final weekend
of September.</p>

<p>PyconUK is a community organised conference focussed on the
<a href="http://python.org/">Python programming language</a> for UK based
developers and other interested parties. This year I was both an attendee and
organiser and this post is a review of my personal highlights.</p>

<p>Actually, I'd like to start by explaining the work that's required to
organise a conference such as PyconUK. First, PyconUK has a great reputation:
it is great value for money (&pound;100 a ticket if you booked as an early bird),
packed full of excellent talks and has a very friendly atmosphere. This is
due to the "tone" set by the originators of the conference back when it
first started five or six years ago. Happily many of the original team are
still involved and it has been an education watching what and how they
organise things.</p>

<p>Since this is a community organised conference all organisers are
volunteers. Most of our interaction was via weekly IRC meetings, although
sometimes we'd find a pub in a vaguely central location (we're
all based in the Midlands) and conduct business
over a friendly pint. In either case, meetings were business like, tended to
be waffle free and always ended in clearly defined and delegated tasks.
There's no room for fanny-annying around when organising PyconUK!</p>

<p>I was principally involved in three tasks:</p>

<ol>
    <li>The <a href="http://www.pyconuk.net/CodeOfConduct">diversity and code
of conduct statement</a></li>
    <li>The <a href="http://2012.pyconuk.net/PyConUKsong">conference song</a>
(!)</li>
    <li>The education track (see below).</li>
</ol>

<p>It is a sad fact that having a diversity statement and/or code of conduct
for a free software conference is becoming the norm. One would hope that
attendees at free software conferences (whose communities value openness, merit
and collaboration) would understand that sexism, racism and all
other forms of prejudicial behaviours are completely unacceptable. Unfortunately,
recent and very public cases at other free software related conferences have
shown that some people are clueless idiots. It is through their moronic
actions that our communities are brought into disrepute
(happily, to my knowledge, PyconUK has never had to deal with such
misdemeanours). We acknowledged the need for such a statement: it would
clearly state the expectations of the wider Python community within the UK and
give us, the organisers, a set of options for dealing with potential idiots.
However, we strongly felt that we <em>didn't</em> want to follow the example of
some other conferences with a list of condescending rules that curtailed
freedom of expression in all its glorious manifestations. These are complex
issues that a mere set of rules would simply aggravate. I contacted a couple
of other "Pycons" (our Italian friends at
<a href="http://europython.eu/">Europython</a> and antipodean cousins at
<a href="http://pycon-au.org">PyconAu</a>) for advice and drafted something
that attempted to walk the fine line between expectation and curtailment. After
feedback from both the other PyconUK organisers and the wider Python community
in the UK, it was adopted. In case you're interested, it's released under a
<a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">creative
commons</a> license and is
<a href="http://www.pyconuk.net/CodeOfConduct">available here</a>. Feedback is
always most welcome.</p>

<img src="/static/images/programmerpythonical.jpg" style="float: right; margin: 8px;"/>

<p>I never imagined I'd be writing, arranging and recording a conference song,
but, thanks to fellow organiser, design guru and "bloke in charge of publicity"
<a href="https://twitter.com/hawkz">Steve Hawkes</a>, it was decided that one
was needed. Given that I have a musical background I was drafted in to help.
Steve's idea was to do a version of the
<a href="https://en.wikipedia.org/wiki/The_Elements_(song)">elements song</a>
but for all the Python language's keywords. This is a classic "patter" song
and is itself based upon the famous
<a href="https://en.wikipedia.org/wiki/Major-General%27s_Song">Major General's Song</a>
from Gilbert and Sullivan's comic opera
<a href="https://en.wikipedia.org/wiki/The_Pirates_of_Penzance">The Pirates of
Penzance</a>. It also fitted quite nicely with the "Victorian" snakes vibe that
Steve was using in his designs - Gilbert and Sullivan are very much a Victorian
phenomenon. A couple of Skype calls and various emails later we had the words
sorted out. We attempted to engage the services of a "proper singer" but in the
end it fell to me to sing the damn thing (and many thanks to my mate,
<a href="https://twitter.com/darrengoldsmith">Darren Goldsmith</a>, who acted
as sound engineer and producer). You can find the results
<a href="https://github.com/ntoll/programmer_pythonical">at this GitHub
repository</a>. Please feel free to suggest new lines and verses via pull
requests! At some point in the not-too-distant future we hope to record a group
of Pythonistas singing the chorus (watch out London Python Code Dojo). We were
hoping to do this at the conference itself but lack of time and the fact that I
lost my voice meant we were unable to fulfil this desire.</p>

<p>In any case, Steve caught the G&amp;S vibe and produced some quite brilliant
t-shirts and personalised mugs quoting lines from the song (see the example on
the right). I really can't wait
to see what he comes up with for next year's conference. I suspect finding a
strong UK based theme is an essential element. We did "The Blitz" last year,
Victorians this year and I'm starting to worry we're turning into something
akin to a Blackadder version of British history given the choices we've been
making. ;-)</p>

<p>How about a bonnets and blouses Jane Austen theme or perhaps something
Elizabethan? Maybe we could go more modern and adopt the swinging sixties as
a touchstone (Austin Powers..?) or Punk?</p>

<p>It remains to be seen what Steve's thoughts on the matter are...</p>

<p>Given the interest in <a href="http://www.raspberrypi.org/">RaspberryPi</a>
(apparently so called because it runs a programming language called "Python"
- just fancy that?) and the teaching of programming in schools (see my blog
posts <a href="http://ntoll.org/article/baking-with-raspberrypipy">here</a>
and <a href="http://ntoll.org/article/teach-our-kids-to-code-or-not">here</a>)
it was suggested that "education" would be a good theme. As I used to
be a teacher I stepped up to bring my colleagues past and present together in
an "education" track.</p>

<p>We, the Python community, have been presented with an opportunity: the
resurgence of interest in the teaching of programming to children
has caused a lot of people to look to Python. Many teachers of ICT (that'd be
Information and Communication Technology) don't have any programming experience
and the thought of teaching such a weird, abstract and potentially
complex activity to a room of thirty kids of mixed ability is likely to fill
them with horror. The question of what should be taught is also moot (hence the
interest in Python). I personally think the promotion and practice of
"computational thinking" facilitated via a language such as Python (but done in
as language neutral way as possible) is the way to go. Obviously (and I'm being
very cynical here), incumbent interests in educational ICT and companies within
the IT industry will be interested in promoting their platform as the mechanism
to "teach the kids to code" (whatever that may mean).</p>

<p>At PyconUK we simply wanted to find out how best to meet the needs of
teachers and show them what it's like to be a part of a free software community
with all that entails: collaboration, debate, openness, meritocracy, sharing of
resources and learning from the examples of others.</p>

<p>So our aim was simple: if you bring two diverse groups of intelligent and
motivated people together interesting things are bound to happen. It turns out
we were correct! I'm especially grateful to
<a href="https://twitter.com/teknoteacher">Alan O'Donohoe</a> for helping me
get the word out (most of the teachers I know are music, rather than ICT,
teachers) and Alan has quite a cult status among those "in the know" about all
things ICT. This culminated in a Google hangout where I was given
the opportunity to promote our event to anyone who happened to drop by:</p>

<object width="560" height="315"><param name="movie" value="http://www.youtube.com/v/PAqQklpZXGc?version=3&amp;hl=en_GB&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/PAqQklpZXGc?version=3&amp;hl=en_GB&amp;rel=0" type="application/x-shockwave-flash" width="560" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>

<p>It turns out that quite a number of teachers were interested but getting
them to come along was quite hard - the current squeeze on school budgets
and indifference of management being the two primary causes. Nevertheless, we
almost had a whole cohort of 30 trainee ICT teachers turn up but, alas, funding
nipped that in the bud.</p>

<p>In the end we had about ten teachers in total turn up over the weekend and
an abundance of developers who wanted to dive in and help.
On the Saturday morning was an
"<a href="https://github.com/ntoll/pyintro">Introducing Python</a>" workshop that
<a href="https://twitter.com/JohnPinner">John Pinner</a> and I ran and there
were also a handful of talks on several education related projects over the
duration of the conference (for example, Mike Sandford's
<a href="http://pyconuk.net/Talks/TurtleModule">talk</a> about the
<a href="http://docs.python.org/library/turtle.html">turtle</a> module).</p>

<p>Sunday morning was perhaps the highlight of the weekend for me as both
teachers and developers rolled up their collective sleeves and took part in an
"education sprint" (a sprint, in the context of a free software conference, is
an intense period of work and collaboration on a specific and clearly defined
project). Here's a group shot of the participants:</p>

<img src="/static/images/pycon2012teachers.jpg" alt="PyconUK 2012 Teachers"/>

<p>We were very lucky to have
<a href="https://twitter.com/MissPhilbin">Carrie Anne Philbin</a> (well
known for her infectious enthusiasm and excellent blog,
<a href="http://www.ictwithmissp.co.uk/">ICT with Miss P</a>) who stepped up
to run a post-it note led session for discovering attendee's interests. It was
a case of worlds colliding. I don't think any of the
developers were aware of the conditions that teachers have to deal with: troll
like network administrators with no interest in helping to promote learning,
locked down laptops that are unusable unless you want to use Word, out-of-date
versions of software that put teachers in the technological stone-age (Internet
Explorer 6!) and all this in
addition to the burden of teaching, marking, planning, social work, behaviour
management, OFSTED inspections and extra-curricular clubs, groups and
activities that form the day to day activities of a teacher.</p>

<p>Once the developers had picked their collective jaws up from the floor,
we agreed to split in to mixed groups of teachers and
developers with a view to quickly drafting outlines of schemes of work, lesson
plans and other educational resources (I spent an enjoyable hour creating a
draft for a scheme of work about text based adventure games). At the end we
came together for a show-and-tell feedback session. The results of the
morning can be found
<a href="https://github.com/ntoll/pyconuk-education-sprint-2012">in this
github repository</a>.</p>

<p>A welcome addition to our ranks was PSF chairperson
<a href="https://twitter.com/VanL">Van Lindberg</a> who made significant
contributions to the discussion about adventure games as a vehicle for
learning. Great stuff! In addition, during the Saturday evening PSF member's
meeting Carrie Anne somehow smuggled herself in resulting in much of the ensuing
conversation to be centred around how the PSF could help teachers use
Python (nice one Miss P!). Happily, it looks like an education portal will
become part of the scope for the redesign of the
<a href="http://python.org/">python.org</a> website and hopefully
Carrie-Anne, Alan and teaching colleagues around the world will have a chance
to shape its development.</p>

<p>Actually, there is an <a
href="https://us.pycon.org/2013/events/edusummit/">education summit</a> at
Pycon in California in March and it would be wonderful if both Carrie-Anne and
Alan could be the recipients of grants so they can attend. One thing that
frustrates me about the world of education is the lack of global coordination:
teachers all over the world duplicate, rather than share, each other's efforts.
No matter the local education system, surely an international
community such as Python can bring teachers together to promote the creative
fun that is programming? If we don't, there's a danger that there won't be a
Pycon left in twenty five year's time. After all, when you have teachers as
enthusiastic as Carrie Anne (see her video response to PyconUK below) and Alan
we'd be fools not to support them in their efforts to help the next generation
of hackers discover their programming chops.</p>

<object width="560" height="315"><param name="movie" value="http://www.youtube.com/v/cDBjHBXJ-SE?version=3&amp;hl=en_GB&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/cDBjHBXJ-SE?version=3&amp;hl=en_GB&amp;rel=0" type="application/x-shockwave-flash" width="560" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>

<p>If you are a teacher or developer interested in collaborating on Python as
a vehicle for learning then you should join Carrie Anne's
<a href="https://groups.google.com/forum/?fromgroups=#!forum/pythonedu">Python
EDU</a> mailing list or get in touch with the
<a href="http://www.python.org/community/sigs/current/edu-sig/">Python in
Education Special Interest Group</a>.</p>

<p>Finally, there was the rest of the conference: the lightning talks
(<a href="http://autoview.autotrain.org/mod/autoview/view.php?id=259">video
here</a>) were as funny as ever with
<a href="https://twitter.com/lordmauve">Dan Pope's</a> talk on his gaming
creations bringing the house down (at around the 31 minute mark). I had a lot
of fun parping on my Tuba with
<a href="https://twitter.com/CrostonBen">Ben Croston</a> (who has the excellent
job of brewing beer in a brewery that's automated by Python). You can hear us
at around the 1h:17m mark.
It was great to catch up with so many old friends in the pub or at the
impromptu curry outing (I'm sure I overheard, "can we have a table for 22
please?") and, of course, there were the talks. I think my favourite slide of
the conference is this one from <a href="https://twitter.com/antocuni">Antonio
Cuni</a> who seems to be channelling Teenage Mutant Ninja Turtles in this
graph explaining the phases of a tracing JIT compiler:</p>

<img src="/static/images/pyconukpypy.jpg" alt="PyconUK PyPy talk"/>

<p>I'm already looking forward to next year (just you wait to see what we have
planned).</p>
<p>:-)</p>
</description>
        <pubDate>Tue, 09 October 2012 21:30:00 GMT</pubDate>
    </item>
    
</channel>
</rss>