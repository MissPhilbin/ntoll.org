<?xml version"1.0" ?>
<rss version="2.0">
<channel>
    <title>ntoll.org ~ everything I say is false</title>
    <link>http://ntoll.org/</link>
    <description>The personal website of Nicholas H.Tollervey</description>
    <image>
        <url>http://ntoll.org/static/images/logo.png</url>
        <link>http://ntoll.org/</link>
    </image>
    
    <item>
        <title>Data and Databases ~ Concise and Simple</title>
        <link>http://ntoll.org/article/databases-concise-and-simple</link>
        <description><h1><a href="/article/databases-concise-and-simple">Data and Databases ~ Concise and Simple</a></h1><p class="published_on">Thursday 14th February 2013 (08:00AM)</p>

<p>(As with all "<a href="/article/concise-and-simple">concise and simple</a>"
articles I assume no prior knowledge of the subject and keep the length to
less than 1500 words.)</p>

<blockquote>
"Scientia potentia est." (Knowledge is power.)
</blockquote>

<p><a href="https://en.wikipedia.org/wiki/Francis_Bacon">Sir Francis Bacon</a>.</p>
<p>In the digital world knowledge is stored, in its latent form, as data in
databases. Everyone from your local
<a href="http://www.tesco.com/clubcard/clubcard/">supermarket</a> to the
<a href="https://www.gov.uk/">government</a> collects data about <em>all of
us</em>. Information and knowledge is extracted about all aspects of
our lives, from our shopping habits to whether we've paid our taxes (it is no
accident that the examples above relate to extracting money from us). According
<a href="http://techcrunch.com/2010/08/04/schmidt-data/"> to Google</a> it
currently takes just two days for us to generate as much information as was
created by all of humanity from the dawn of time until 2003.</p>

<p>This article is about data and databases - the technology that makes the
accumulation and analysis of this flood of information possible. It starts with
a simple question: what is data?</p>

<p>"Data" are values that convey meaningful information about something.
Meaning is implied by the context and structure of the data. Structure is
formed from the way data is represented. Databases simply store and provide
mechanisms for working with structured data.</p>

<p>The most fundamental data-related act is to name a value:</p>

<p><pre><code class="python">my_name = "Nicholas Tollervey"</code></pre></p>

<p>My name <em>is</em> Nicholas Tollervey. This is shown by
"<code>my_name</code>" being assigned the value "<em>Nicholas Tollervey</em>".
Assignment happens when a <em>token name</em> is followed by an <em>equals
</em> sign that is, in turn, followed by a <em>value</em>. Notice the three
layers: meaning, structure and representation.</p>

<p>Another example:</p>

<p><pre><code class="python">nicholas = {
    "first_name": "Nicholas",
    "middle_name": "Harry",
    "surname": "Tollervey",
    "birthday": {
        "year": 1973,
        "month": 8,
        "day": 19
    }
    "height": 180,
    "weight": 76.9
}</code></pre></p>

<p>After reading the above I'm certain you'll know when to send me a birthday
card. Something called <code>nicholas</code> has a single value associated with
it: an
<a href="https://en.wikipedia.org/wiki/Associative_array">associative
array</a>. Associative arrays are <em>key / value</em> pairs - like a
dictionary of words or a subject index at the back of a book. In this case it
has six entries, one of which is itself a nested associative array with three
entries. It's an associative array because it is enclosed by
curly braces and contains a list of <code>"key_name": value</code> pairs
separated by commas. The associative array is assigned to <code>nicholas</code>
in exactly the same way as the first example (<em>token name</em> followed by
<em>equals</em> followed by <em>value</em>).</p>

<p>Incidentally, I can retrieve my data like this:</p>

<p><pre><code>&gt;&gt;&gt; my_name
"Nicholas Tollervey"
&gt;&gt;&gt; nicholas["height"]
180</code></pre></p>

<p>(This example uses the <a href="http://python.org/">Python</a>
programming language: I type in commands after the <code>&gt;&gt;&gt;</code>
prompt and the Python interpreter replies on the new line.)</p>

<p>A final example:</p>

<table>
    <caption>People</caption>
    <tr>
        <th>id</th>
        <th>first_name</th>
        <th>middle_name</th>
        <th>surname</th>
        <th>nationality_id</th>
    </tr>
    <tr>
        <td>1</td>
        <td>Nicholas</td>
        <td>Harry</td>
        <td>Tollervey</td>
        <td>2</td>
    </tr>
    <tr>
        <td>2</td>
        <td>Terry</td>
        <td>Charles Oliver</td>
        <td>Jones</td>
        <td>1</td>
    </tr>
    <tr>
        <td>3</td>
        <td>Esteve</td>
        <td></td>
        <td>Fernandez</td>
        <td>3</td>
    </tr>
</table>

<table>
    <caption>Nationalities</caption>
    <tr>
        <th>id</th>
        <th>name</th>
    </tr>
    <tr>
        <td>1</td>
        <td>Australian</td>
    </tr>
    <tr>
        <td>2</td>
        <td>British</td>
    </tr>
    <tr>
        <td>3</td>
        <td>Spanish</td>
    </tr>
</table>

<p>Obviously, I'm British and my buddies
<a href="https://twitter.com/terrycojones">Terry</a> and
<a href="https://twitter.com/esteve">Esteve</a> are
Australian and Spanish (respectively). You know this because you understand how
to read tabular information and spot the relationship between the values in the
<code>nationality_id</code> column of the <em>People</em> table and the values
in the <code>id</code> column of the <em>Nationalities</em> table. You know
it's tabular information because it's a two dimensional grid with the
vertical columns indicating named fields and horizontal rows representing
individual records. Once again: meaning, structure, representation.</p>

<p>Each example is more complex than the one preceding it. The first is a
single key / value pair (where <code>my_name</code> is the key and
"<em>Nicholas Tollervey</em>" is the value), the second is a key
(<code>nicholas</code>) associated with a value that is itself key / value
pairs (the associative array). Finally, the third example contains rows of
items that all share the same keys (a.k.a. columns) but different values. Each
type of record (people, nationalities etc) has its own table.</p>

<p>How do such meaningful data structures / representations relate to
databases?</p>

<p>There are four basic actions that all databases may perform on data:
<em>create</em>, <em>read</em>, <em>update</em> and <em>delete</em> (often
expressed as
<a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>).
There are many types of database that meet this minimum functionality. The
three data examples illustrate the types of data structure stored in three of
the most popular types of database: key / value stores (such as
<a href="http://redis.io/">Redis</a> or
<a href="http://www.memcached.org/">Memcached</a>), document oriented databases
(like <a href="http://www.mongodb.org/">MongoDB</a> or
<a href="https://couchdb.apache.org/">CouchDB</a>) and relational databases
(for example, <a href="http://www.postgresql.org/">Postgres</a> or
<a href="https://www.mysql.com/">MySQL</a>).</p>

<p>Key / value databases are, at heart, associative arrays. They provide three
basic actions:</p>

<ul>
    <li>Assign a value to a key (both creating and updating).</li>
    <li>Read a value associated with a known key.</li>
    <li>Delete a value using a known key.</li>
</ul>

<p>Such simple databases are extremely fast and well suited for tasks where
speed is of the essence. However, there isn't a simple way to search the stored
values and keys must be known before being used to retrieve or delete
associated values. Nevertheless, they are extremely useful as caches of
arbitrary values. If you want to try such a database you should visit the
<a href="http://try.redis.io/">try redis tutorial</a> tutorial ~ a gentle yet
comprehensive tour of a popular key / value store.</p>

<p>Document oriented databases store arbitrarily structured documents
expressed as associative arrays. Every document has a unique ID created by the
database and used as a key to reference the document.</p>

<p>However, documents are not opaque values as in key / value databases.
Rather, it is possible to <em>reach in to the documents</em> and construct
queries that reference the document's named attributes (keys). For example,
given a <em>people</em> database I could create a query to retrieve all
documents that have a <em>height</em> attribute with a value greater or equal
to 180.  Since the structure of the documents is arbitrary, such queries rely
on conventions (all <em>people</em> documents have a <em>height</em> attribute
whose value is expressed in centimetres).</p>

<p>Because document structure is not fixed (except by convention), new fields
can be added at any time and document oriented databases specify default
handling for missing fields - usually they'll evaluate to <code>null</code>
(unknown).</p>

<p>To play with a document oriented database, explore the MongoDB
tutorial on the project's
<a href="http://www.mongodb.org/">homepage</a>.</p>

<p><a href="https://en.wikipedia.org/wiki/Relational_database">Relational
databases</a> developed from the work of
<a href="https://en.wikipedia.org/wiki/E.F._Codd">Edgar Codd</a>. They store
data in rows
(<a href="https://en.wikipedia.org/wiki/Tuple">tuples</a>) that share the same
columns
(<a href="https://en.wikipedia.org/wiki/Attribute_(computing)">attributes</a>)
defined in tables
(<a href="https://en.wikipedia.org/wiki/Relation_(database)">relations</a>) -
bracketed words are the formal terminology for the colloquially named
concepts. Each row contains a special field called the
<a href="https://en.wikipedia.org/wiki/Primary_Key">primary key</a> (the
<code>id</code> column in the example) that uniquely identifies the record.
Tables, representing different sorts of things, are related to each other with
special fields called
<a href="https://en.wikipedia.org/wiki/Foreign_key">foreign keys</a> that
reference primary keys of rows in different tables (the
<code>nationality_id</code>). Many relational databases also enforce
constraints such as
<a href="https://en.wikipedia.org/wiki/Referential_integrity">referential
integrity</a> - where foreign keys may not refer to non-existent primary
keys.</p>

<p>To work efficiently, data in relational databases should be
<a href="https://en.wikipedia.org/wiki/Database_normalization">normalised</a>
to avoid duplication. Data need only be stored in one table
representing a specific type of thing. Therefore, modifications only happen
once and are propagated via the relationships between tables. For example, the
<em>nationalities</em> table is the only place where nationalities may be
defined. Tables for things with nationalities (such as <em>people</em>) need
only reference the single <em>nationalities</em> table via a foreign key rather
than duplicate such information. The process of normalisation usually has
three steps of increasing efficiency:
<a href="https://en.wikipedia.org/wiki/First_normal_form">first</a>,
<a href="https://en.wikipedia.org/wiki/Second_normal_form">second</a> and
<a href="https://en.wikipedia.org/wiki/Third_normal_form">third</a> normal
forms. Sometimes it is necessary to de-normalise a database for performance
reasons - it's faster to retrieve a single row than it is to retrieve several
related rows from different tables.</p>

<p>Structured Query Language
(<a href="https://en.wikipedia.org/wiki/SQL">SQL</a>) is the programming
language used by relational databases to work with data. Based upon
<a href="https://en.wikipedia.org/wiki/Relational_algebra">relational
algebra</a>, it provides CRUD functionality and capabilities for
specifying the structure and relationships between data. It's easy to create
powerful queries:</p>

<p><pre><code class="sql">SELECT people.first_name, people.surname, nationalities.name
FROM people
JOIN nationalities ON nationalities.id = people.nationality_id
WHERE people.surname = "Jones"</code></pre></p>

<p>The result of which is:</p>

<table>
    <tr>
        <th>people.first_name</th>
        <th>people.surname</th>
        <th>nationality.name</th>
    </tr>
    <tr>
        <td>Terry</td>
        <td>Jones</td>
        <td>Australian</td>
    </tr>
</table>

<p>The query asks: give me the first name, surname and nationality (line 1) of
people whose surname is "Jones" (line 4). We have to specify where to collect
this data (line 2) and how to join the related tables together (line 3). Notice
that SQL doesn't specify how to run the query but describes what the expected
result should be.</p>

<p>Interactions with a database happen as
<a href="https://en.wikipedia.org/wiki/Database_transaction">transactions</a>.
Transactions can contain many different commands and should have several
desirable properties:</p>

<ul>
    <li><em>Atomicity</em> - transactions are an all-or-nothing affair that
    cannot be abandoned in an incomplete state.</li>
    <li><em>Consistency</em> - transactions fail if they attempt to
    put the database in to an invalid state such as breaking referential
    integrity or some other constraint.</li>
    <li><em>Isolation</em> - each transaction is independent of and cannot
    interfere with any of the others.</li>
    <li><em>Durability</em> - once complete a transaction's effect will
    remain despite catastrophic events like power failure, crashes or
    errors.</li>
</ul>

<p>A database is
<a href="https://en.wikipedia.org/wiki/ACID">ACID</a> compliant if its
transactions meet these standards.</p>

<p>The pace of change in data-based technology is fast. Relatively recent
trends, such as <a href="https://en.wikipedia.org/wiki/Big_data">big
data</a> (huge data sets and the technology needed to manage them), deserve
their own article. Yet, even the technology described above allows
companies and governments to build frighteningly accurate pictures of our
lives (how do you think Amazon is able to make such useful suggestions?).</p>

<p>Personally, I find the ubiquitous analysis and measurement of our behaviour
inadvertently Orwellian. Furthermore, there is a tendency to trust the results
obtained from databases without recognizing the <em>meaning</em> level of
data relies on interpretation (of which there are many varieties).
Nevertheless, there are great opportunities to do good and I am reminded of the
Buddhist proverb,</p>

<blockquote>
"To every man is given the key to the gates of heaven; the same key opens the
gates of hell."
</blockquote>

<p>I hope we choose the right gate.</p>

<p><small>1499 words (not including code examples).</small></p>
</description>
        <pubDate>Thu, 14 February 2013 08:00:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Programming ~ Concise and Simple</title>
        <link>http://ntoll.org/article/programming-concise-and-simple</link>
        <description><h1><a href="/article/programming-concise-and-simple">Programming ~ Concise and Simple</a></h1><p class="published_on">Wednesday 30th January 2013 (08:00AM)</p>

<p>(As with all "<a href="/article/concise-and-simple">concise and simple</a>"
articles I assume no prior knowledge of the subject and keep the length to
less than 1500 words.)</p>

<p>This is a personal reflection on programming: the creation and curation of
instructions that make computers do things. Instructions (also known as
"<a href="https://en.wikipedia.org/wiki/Source_code">source code</a>" or just
"code") are organised into
<a href="https://en.wikipedia.org/wiki/Computer_program">programs</a> (or
"<a href="https://en.wikipedia.org/wiki/Software">software</a>") that fulfil
specific
tasks. People who write programs are called
<a href="https://en.wikipedia.org/wiki/Programmer">programmers</a>,
developers, software engineers or (colloquially)
<a href="https://en.wikipedia.org/wiki/Hacker_(term)">hackers</a>.</p>

<p><img src="/static/images/code.png" alt="code"/></p>

<p>Instructions are expressed in
<a href="https://en.wikipedia.org/wiki/Programming_language">programming languages</a>
that make it easier for humans to comprehend what is going on. So-called "high
level" languages are easier for humans to work with than "low level" languages
that express things in a way that is closer to the way the computer works. In
all cases programs are transformed from the original programming language into
the <a href="https://en.wikipedia.org/wiki/Machine_code">binary
instructions</a> that cause the computer to function in a particular way.
This transformation can happen in two ways:</p>

<ul>
    <li>The program is "compiled" in to binary instructions by a special
    program called a
    <a href="https://en.wikipedia.org/wiki/Compiler">compiler</a>. The result
    is an "<a href="https://en.wikipedia.org/wiki/Executable">executable</a>"
    run by the end user.</li>
    <li>The program is "interpreted" by an <em>executable</em>
    <a href="https://en.wikipedia.org/wiki/Interpreter_(computing)">interpreter</a>
    whose function is to act as a sort of on-the-fly translator of the
    instructions.</li>
</ul>

<p>Both mechanisms have strengths and weaknesses. Because compiled programs
have already been transformed in to the computer's binary instructions they
are often much faster than interpreted programs where such
transformations happen as the program is running. Yet interpreted programs
offer the flexibility of adapting and changing themselves while they are run by
the interpreter which makes it easier to solve certain sorts of programming
problem. Sometimes a combination of these techniques is used:
A <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">JIT</a>
compiler will interpret until certain sets of instructions are
obviously more frequently used, at which point <em>only the popular sets of
instructions</em> get compiled "just in time" to make them faster.</p>

<p>Sometimes programs work as expected and produce valuable results. More often
they do not. The failure to make a computer work usefully is called a
<a href="https://en.wikipedia.org/wiki/Computer_bug">bug</a>.
There are generally two sorts of bug: the wrong outcome is correctly
implemented (the design is wrong) or the expected outcome is wrongly
implemented (the instructions are wrong). In any case, because computers are
complex machines making them do something useful is surprisingly hard.</p>

<p>Managing and taming complexity is one of the core tasks of a programmer. A
common piece of advice given to junior developers is
"<a href="https://en.wikipedia.org/wiki/Keep_it_simple_stupid">kiss</a>"
(keep it simple, stupid!), for there are fewer things that could go wrong. As
computing pioneer <a href="https://en.wikipedia.org/wiki/Tony_Hoare">Tony
Hoare</a> explains,</p>

<blockquote>"There are two ways of constructing a software design: One way is
to make it so simple that there are obviously no deficiencies, and the other
way is to make it so complicated that there are no obvious deficiencies. The
first method is far more difficult."</blockquote>

<p>Personally, I think creating simple and useful software is more like
writing succinct yet powerful prose than opaque logical wizardry. This has
an important side effect: simple and coherent code is easy to understand. Code
that is easy to understand is easy to maintain. Maintaining code is the act of
fixing bugs and curating instructions so things work efficiently (also known
as <a href="https://en.wikipedia.org/wiki/Code_refactoring">re-factoring</a>).
In this way a program is easy to improve as bugs are found and new features
implemented.</p>

<p>Some languages have been created with the explicit aim of making code
easy to read and understand (such as <a href="http://python.org">Python</a>).
Some developers promote certain development styles that they claim encourages
programmers to produce high quality software. A classic example of this is
<a href="https://en.wikipedia.org/wiki/Test-driven_development">test driven
development</a> where developers write a failing test encapsulating a feature
of their program before actually implementing the feature itself to make the
test eventually pass. Others (such as
<a href="https://en.wikipedia.org/wiki/Donald_Knuth">Donald Knuth</a>)
promote a
<a href="https://en.wikipedia.org/wiki/Literate_programming">literate style of
programming</a> where code is interspersed with natural language explanations
that tell the "story" of the code.</p>

<p>Another core skill of a programmer is de-constructing and analysing the
problem that they are trying to solve. Often the problem is expressed in a
vague and open-ended way and it is the task of the developer to precisely
constrain the scope of the problem so they can create some
useful outcome. A personal example, from my first programming class, illustrates
this beautifully: my tutor explained that programs were merely instructions
and that we had five minutes to write instructions telling him how to switch
on the lights of the classroom. How hard could it be to write such
instructions? Take a minute to think about what <em>you</em> would write (you
may assume that the person following them knows about directions, actions and
names of things).</p>

<p>I can still remember my list:</p>

<ul>
    <li>Stand up.</li>
    <li>Look around until you locate the light switch.</li>
    <li>Walk in the direction of the switch.</li>
    <li>Press the switch with your fingers.</li>
    <li>Retrace your steps.</li>
    <li>Sit down.</li>
</ul>

<p>Of course, I failed miserably. My tutor pointed out that he was already
stood up, there were desks between him and the light switch and the damn lights
were already on anyway. Thus, what appeared to be a simple problem
(tell me how to switch on the lights) turned out to be far more complex than
first imagined.</p>

<p>Time and resources are also essential elements of software development:</p>

<p>First, the developer needs to have a feel of how best to organise a
program.  This means analysing their implementation of the
<a href="https://en.wikipedia.org/wiki/Algorithm">algorithm</a> (the
instructions at a conceptual level) to ensure that it is both timely and makes
efficient use of resources like the computer's memory and
<a href="https://en.wikipedia.org/wiki/Cpu">CPU</a>. Often
this is expressed using <a href="https://en.wikipedia.org/wiki/Big_O_notation">big-O</a> notation.</p>

<p>Second, programming usually involves a deadline. Customers need to know how
much time it will take to finish software given a certain number of developers
and some sort of collaborative development process. I've heard this described
as "the cat herding problem". Fred Brooks
<a href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month">famously observed</a>
that adding developers to a struggling project only slows it down further.
Furthermore, clients change their minds mid-project (in addition to providing
vague problems like the one mentioned above) and there are always
<a href="https://en.wikipedia.org/wiki/There_are_known_knowns">unknown
unknowns</a> that add unforeseen time and effort to the project. If this were
not enough, how do you coordinate teams of programmers who are all working on
the same software?  It's like trying to get ten people to co-compose a symphony
<em>at the same time</em>.</p>

<p>Happily, developers have created methods and tools to help them work
together. Small autonomous
"<a href="https://en.wikipedia.org/wiki/Agile_software_development">agile</a>"
teams are preferred over large managed cohorts of developers.
<a href="https://en.wikipedia.org/wiki/Issue_tracking_system">Issue tracking
systems</a> make it easy for clients to request and prioritise features,
report bugs and give developers a clear audit trail upon which to base
development decisions. Code is stored in
<a href="https://en.wikipedia.org/wiki/Revision_control">version control
systems</a> that allow developers to track each other's changes and
resolve any conflicts in the software (for example, when two people edit the
same piece of code). In fact, developers have become so good at this sort of
thing that others borrow these tools and techniques: lawyers have been known to
collaborate on complex legal documents with a version control system.</p>

<p>Finally, programming is a political activity: making software
means defining the laws that dictate how the digital world should be. Often
this obvious fact is left unacknowledged. However, incumbent interests affected
by the rise of digital culture (for example, the so-called "creative"
industries represented by organisations such as the
<a href="https://en.wikipedia.org/wiki/RIAA">RIAA</a>,
<a href="https://en.wikipedia.org/wiki/MPAA">MPAA</a> and their ilk)
have attempted, with some success, to change the law to limit the use of file
sharing software used to distribute pirated content.</p>

<p>Yet, programmers have turned the law to their advantage.
<a href="https://en.wikipedia.org/wiki/Richard_Stallman">Richard Stallman</a>,
founder of the <a href="http://fsf.org/">Free Software Foundation</a> (FSF),
was fed up with locked down dis-empowering software so set out
<a href="https://www.gnu.org/philosophy/free-sw">four essential
freedoms</a>:</p>

<ul>
    <li>The freedom to run the program, for any purpose (freedom 0).</li>
    <li>The freedom to study how the program works, and change it so it does
    your computing as you wish (freedom 1). Access to the source code is a
    precondition for this.</li>
    <li>The freedom to redistribute copies so you can help your neighbor
    (freedom 2).</li>
    <li>The freedom to distribute copies of your modified versions to others
    (freedom 3). By doing this you can give the whole community a chance to
    benefit from your changes. Access to the source code is a precondition for
    this.</li>
</ul>

<p>These freedoms are enshrined in the
<a href="https://www.gnu.org/licenses/gpl">General Public License</a> (GPL) -
a license that subverts copyright (that seeks to
<a href="https://en.wikipedia.org/wiki/All_rights_reserved">expand the rights
of creators</a> at the expense of the rights of others) in to
<a href="https://en.wikipedia.org/wiki/Copyleft">copy<em>left</em></a> (that
seeks to <a href="https://en.wikipedia.org/wiki/All_rights_reversed">expand the
rights</a> of everyone). There is one important exception that limits
everyone: any modifications to source code covered by the GPL must also be
freely available under the GPL. While the GPL has been described as
<a href="http://www.zdnet.com/blog/open-source/the-commie-smear-against-open-source/946">communist</a> and
<a href="http://www.theregister.co.uk/2001/06/02/ballmer_linux_is_a_cancer/">cancerous</a>
it is not anti-commerce and (I think intentionally) does not mention any
political affiliations. Code covered by the GPL can be sold (see sections
<a href="https://www.gnu.org/licenses/gpl#section10">10</a> and
<a href="https://www.gnu.org/licenses/gpl#section11">11</a>). It's how the FSF
first raised money for their cause.</p>

<p>There's a sentiment gaining in popularity:
<a href="https://www.youtube.com/watch?v=imV3pPIUy1k">program, or be
programmed</a>. If you would like to learn to program, there are
<a href="https://www.khanacademy.org/cs/tutorials/programming-basics">plenty</a> of
<a href="https://www.udacity.com/courses">resources</a> available
<a href="https://www.coursera.org/category/cs-programming">online</a>.

<p><small>1497 words. Image credits: &copy; 2013 the author with
<a href="http://instacode.linology.info/17689">this service</a>.</small></p>
</description>
        <pubDate>Wed, 30 January 2013 08:00:00 GMT</pubDate>
    </item>
    
    <item>
        <title>Northackton Magic Marble Machines</title>
        <link>http://ntoll.org/article/northackton-marbles</link>
        <description><h1><a href="/article/northackton-marbles">Northackton Magic Marble Machines</a></h1><p class="published_on">Monday 21st January 2013 (10:45PM)</p>

<p>This evening I attended another friendly
<a href="http://northackton.stdin.co.uk/blog/">Northackton</a> meeting (my
local <a href="https://en.wikipedia.org/wiki/Hackerspace">hackerspace</a>). It
was great to see so many people turn out for a "build your own marble machine"
workshop. I took along two of my kids to join in the fun: Penelope
(11) and Sam (8).</p>

<p>As with the previous
<a href="/article/northackton-useless-machine">useless machine</a> workshop we
were joined by friend-of-Northackton and maker-extraordinaire
<a href="https://sites.google.com/site/msraynsford/">Martin Raynsford</a>
who has set himself the task of providing 365 laser cut items in 365 days. He
provided us with a nifty
<a href="http://msraynsford.blogspot.co.uk/2012/12/project-7-marble-machine-1.html">marble machine</a>
~ a laser cut wooden mechanism that's easy to assemble with just a craft
knife, wood glue and a screw driver. If you email Martin he'll supply the
necessary files for you to cut your own mechanism or will sell you the pre-cut
kits that we were using. Furthermore, his blog is definitely worth a read and
packed full of all sorts of interesting projects (the
<a href="http://msraynsford.blogspot.co.uk/2012/08/lizard-spiral.html">Escher Lizards</a>
particularly caught my eye).</p>

<p>Both Penelope and Sam had a great time to the extent that Penelope was
trying to work out how she could attend again despite having a string
orchestra rehearsal on Monday evenings.</p>

<p>Here's Sam demonstrating the contraption we built together:</p>

<p><iframe width="420" height="315" src="https://www.youtube-nocookie.com/embed/vsFu_dt73tY?rel=0" frameborder="0" allowfullscreen></iframe></p>

<p>I love how he's so engrossed in tweaking the spiral and chute (especially at
the end of the clip). Penelope was also rather distracted by last minute
adjustments to her solo effort:</p>

<p><iframe width="420" height="315" src="https://www.youtube-nocookie.com/embed/t6LKPgWuel4?rel=0" frameborder="0" allowfullscreen></iframe></p>

<p>Why don't schools make use of such fun, easy-to-build and interesting
models? It certainly beats the plastic key ring I "made" over six weeks when I
was at school.</p>
</description>
        <pubDate>Mon, 21 January 2013 22:45:00 GMT</pubDate>
    </item>
    
</channel>
</rss>